va中文問題的討論已經相當多了，但由於Java的相關技術標準繁多，面向Java的Web伺服器、應用伺服器以及JDBC數據庫驅動等都沒有官方的標準，所以Java應用在處理中文時所存在的問題不僅沒有消失而且隨著所選用的伺服器、驅動程式以及運行環境等因素的不同而變化。那麼我們如何從眾多現象中找出問題所在，並進行分析和解決呢？與大部分的討論不同，本文將主要從如何預測、發現和檢查問題的角度給出建議，幫助開發人員找出可能引起問題的各種源頭，從而更好地解決Java的中文問題。

引言

儘管對於Java中文處理問題的討論已不乏其數，但由於Java技術涉及內容廣（J2EE包含了十幾種相關技術），技術供應商繁多，面向Java的Web伺服器、應用伺服器以及JDBC數據庫驅動等都沒有官方的標準，所以Java應用在處理中文過程中出了存在固有的問題外也存在隨著選用的伺服器，驅動程式的不同而帶來的Java中文問題的多變性，增加了問題的複雜度。那麼，我們如何在這麼紛繁的現象中找到問題的癥結呢？

Java中文問題的一般解決辦法

事實上，Java的中文問題都是由於Java應用所採用的缺省編碼格式與目標或者應用所要讀入字符的編碼格式不同而造成的（具體參見文獻1）。對於如何解決Java的中文問題，通常有四種方法：

1）選擇JDK的中文本地化版本。儘管Java2 JDK的中文本地化版本（http://java.sun.com/products/jdk/1.2/chinesejdk.html）並不是一個官方的版本，Sun公司也沒有承諾會對該本地化版本進行升級，但其仍不失為一個Java中文問題的解決方案。

2）選擇合適的編譯參數。對於Java的國際版本來講，我們也可以在編譯Java應用的時候通過指定確定的編碼機制來實現其編譯結果對中文的支援。例如，對於需要支援繁體中文和簡體中文應用可以通過javac -encoding big5 sourcefile.java 和javac -encoding gb2312 sourcefile.java來編譯源程式。

3）通過編程的方式實現字符編碼的轉換代碼。通過編程的方式來解決Java的中文問題，已經成為了一種較為普遍的做法。下面就是一種最常見的字符編碼轉換函數，其將字符的編碼格式轉換為中文Windows系統的GBK編碼形式。
